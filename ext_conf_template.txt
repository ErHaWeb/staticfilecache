# cat=basic; type=boolean; label=Clear cache for all domains in tree: When the TYPO3 tree hosts more than one domain, each domain has it's own cache branch. When clearing the cache, only the cache for the domain you are logged on to will be cleared. If you would like the cache for all domains to be cleared when clearing the frontend cache, then check this box.
clearCacheForAllDomains = 1

# cat=basic; type=boolean; label=Boost mode: This mode do not delete the cache files, if editor change the cache or delete it. The URLs are added to a queue and there is a scheduler task that call the URLs to rebuild the cache. As result: The regular FE users always get a fast StaticFileCache.
boostMode = 0

# cat=basic; type=options[Current=current,Childs=childs,Both=both]; label=Backend display options:The backend module should display cache entries of the current page, only the direct children or both?
backendDisplayMode = both

# cat=basic; type=boolean; label=Debug headers:Send debug headers to get a information which component deliver the file (X-SFC-State).
debugHeaders = 0

# cat=basic; type=string; label=Valid htaccess headers:List of headers that are transfered to the htaccess configuration. E.g. if you use config.additionalHeaders.xxx you can add this headers here
validHtaccessHeaders = Content-Type,Content-Language,Link,X-SFC-Tags

# cat=basic; type=boolean; label=Disable StaticFileCache in development: When checked, the StaticFileCache won't be generated if in development application context.
disableInDevelopment = 0

# cat=basic; type=boolean; label=Rename cacheing tables from cf_* to sfc_*: When checked, the caching tables of the DB layer are not prefixed with cf_* anymorer. If you truncate the cf_* tables (typo3_console clear cache force) without the implementation, the cache has files but no DB representation. You could rename the tables with this options (run DB compare!!)
renameTablesToOtherPrefix = 0

# cat=basic; type=boolean; label=Use reverse URI length in priority: Add "1000-URILENGTH" to the priority so the home page is much more important than deaplinks
useReverseUriLengthInPriority = 1

# cat=basic; type=boolean; label=Use fallback middleware: use the fallback middleware to deliver the static file, if there is no htaccess configuration
useFallbackMiddleware = 0

# cat=basic; type=boolean; label=Hash URI in cache (BETA!!!): Hash the URI in cache so the cache idenfier is short. Avoid problems with very lage URIs
hashUriInCache = 0

# cat=basic; type=boolean; label=Use rawurldecode for path: call the PHP method rawurldecode for the cache filename path of the URI
rawurldecodeCacheFileName = 0

# cat=basic; type=string; label=Htaccess Template name: The template path for the htaccess file generation
htaccessTemplateName = EXT:staticfilecache/Resources/Private/Templates/Htaccess.html

# cat=basic; type=string; label=Override cache directory: If this config var is empty the default is "typo3temp/tx_staticfilecache/". If you change this value you HAVE TO addapt you rewrite configuration.
overrideCacheDirectory =

# cat=generator; type=boolean; label=Enable Cache Manifest generator (BETA!!!): Create manifest files
enableGeneratorManifest = 0

# cat=generator; type=boolean; label=Enable Plain generator: When checked, the normal (default) file will write to the cache.
enableGeneratorPlain = 0

# cat=generator; type=boolean; label=Enable GZIP compression generator: When checked, a gzipped version of the static file is written to the cache directory. Take care to also choose the proper .htaccess configuration when enabling this option.
enableGeneratorGzip = 1

# cat=generator; type=boolean; label=Enable Brotli generator: When checked, the brotli version of the static file is written to the cache directory.
enableGeneratorBrotli = 0

# cat=Headers; type=boolean; label=Send Cache-Control header: If your Apache installation has 'mod_expires' loaded, you can use it to send Cache-Control headers. For each statically cached page a .htaccess file will be created with a mod_expires rule. This rule will make Apache send a cache header when delivering the cached page to the visitor.
sendCacheControlHeader = 1

# cat=Headers; type=boolean; label=Send Cache-Control header redirect after cache timeout: Add a mod_rewrite statement to the generated htaccess files, that redirect the user to the index.php, if the Cache is invalid.
sendCacheControlHeaderRedirectAfterCacheTimeout = 0

# cat=Headers; type=boolean; label=Send TYPO3 Headers: Send the config.additionalHeaders header via .htacess files
sendTypo3Headers = 0

# cat=Cache Tags; type=boolean; label=Enable Cache Tags: Output the TSFE cache Tags for the current site in the rendering and for the cache entry
cacheTagsEnable = 0

# cat=HTTP/2 Push; type=boolean; label=Enable HTTP/2 Push: Enable sending HTTP/2 push headers (experimental)
sendHttp2PushEnable = 0

# cat=HTTP/2 Push; type=string; label=File extensions for HTTP/2 push: Different file extension for HTTP/2 push. Please take care, that there is a Handler for parsing the file Extensions
sendHttp2PushFileExtensions = css,js

# cat=HTTP/2 Push; type=string; label=File limit for HTTP/2 push: The limit of files that are added as HTTP/2 push
sendHttp2PushFileLimit = 10
